#+OPTIONS: toc:nil num:nil
#+STARTUP: content indent
#+STARTUP: hidestars

* Emacs Configuration

** Support older versions of Emacs

[[https://github.com/akirak/emacs.d/blob/master/main.org][@akirak]]
=when-let= and =if-let= are available in Emacs 25.1, but they have been renamed to =when-let*= and =if-let*= in 26.1, which are correct names to describe their behaviours.

#+begin_src emacs-lisp
(eval-and-compile
  (when (version< emacs-version "26")
    (with-no-warnings
      (defalias 'when-let* #'when-let)
      (function-put #'when-let* 'lisp-indent-function 1)
      (defalias 'if-let* #'if-let)
      (function-put #'if-let* 'lisp-indent-function 2))))
#+end_src

If you run emacs <= 24.3 the macro with-eval-after-load is not defined. Here is the definition:

#+begin_src emacs-lisp
(unless (fboundp 'with-eval-after-load)
      (defmacro with-eval-after-load (file &rest body)
        (declare (indent 1) (debug t))
        `(eval-after-load ,file '(progn ,@body))))
#+end_src


** Turn on functions disabled by default

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC


** Turn off mouse interface early in startup to avoid momentary display

#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC


** Before using use-package

#+BEGIN_SRC emacs-lisp
(jawa/require 'setup-gc)
#+END_SRC

Compute package use statistics.
Run =use-package-report= before closing.

#+begin_src emacs-lisp
(setq use-package-compute-statistics t)
#+end_src

These packages are required in other use-package directives declared in this
configuration.

#+begin_src emacs-lisp
(use-package el-patch
  :custom
  (el-patch-enable-use-package-integration t))
#+end_src

#+begin_src emacs-lisp
  (defcustom jawa/no-littering-use-my-etc-library t
    "Whether to use my configuration file library in ~/lib/emacs as `no-littering-etc-directory'.")

  (use-package no-littering
    :init
    (when jawa/no-littering-use-my-etc-library
      (let ((dir "~/lib/emacs"))
        (when (or (file-directory-p dir)
                  (and (yes-or-no-p "~/lib/emacs does not exist. Clone it from GitHub?")
                       (= 0 (call-process-shell-command
                             (format "git clone %s %s"
                                     "https://github.com/Jawabiscuit/emacs-config-library.git"
                                     (shell-quote-argument (expand-file-name dir)))
                             nil nil nil))))
          (setq no-littering-etc-directory dir))))
    :config
    ;; Autosave and custom.el settings
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (if jawa/no-littering-use-my-etc-library
        (setq custom-file
              (no-littering-expand-etc-file-name "custom.el"))
      (setq custom-file (expand-file-name "custom.el" user-emacs-directory)))

    ;; Load custom.el
    (load custom-file))
#+end_src


** Activate package.el for loading built-in packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize 'noactivate)

;; Minimal melpa configuration, mostly for trying out packages.
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

(use-package dash)
(use-package dash-functional)
#+END_SRC


** Site-lisp

#+BEGIN_SRC emacs-lisp
(setq site-lisp-dir
      (expand-file-name "site-lisp" user-emacs-directory))
#+END_SRC


** Ein site-lisp dir (disabled)

#+BEGIN_SRC emacs-lisp :eval no :tangle no
(setq ein-site-lisp-dir
      (concat site-lisp-dir
              (convert-standard-filename "/emacs-ipython-notebook/lisp")))
#+END_SRC


** Functions

#+BEGIN_SRC emacs-lisp
(setq defuns-dir
      (expand-file-name "defuns" user-emacs-directory))
#+END_SRC


** Load all files in defuns-dir

#+BEGIN_SRC emacs-lisp
(dolist (file (directory-files defuns-dir t "\\w+"))
  (when (file-regular-p file)
    (load file)))
#+END_SRC


** Setup load-path

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path settings-dir)
(add-to-list 'load-path site-lisp-dir)
;; (add-to-list 'load-path ein-site-lisp-dir)
#+END_SRC


** Add external project submodules (site-lisp) to load path

#+BEGIN_SRC emacs-lisp
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+END_SRC


** Improved keybinding

Use general.el to define keybindings. It has made several improvements over
bind-key, including a built-in support for which-key.

This also adds support for =:general= keyword in use-package directives

=general-describe-keybindings= will show a helpful table of defined keys

#+begin_src emacs-lisp
(use-package general)
#+end_src

Allow use of =:wk= keyword in general.el keybinding definitions

#+begin_src emacs-lisp
(jawa/require 'setup-which-key t)
#+end_src

*** Generic definer

#+begin_emacs-lisp
(general-create-definer jawa/bind-key)
#+end_emacs-lisp

*** Emacs standard prefix key definers

#+begin_src emacs-lisp
(general-create-definer jawa/bind-register :prefix "C-x r")
  (define-obsolete-function-alias 'jawa/bind-register-map
    'jawa/bind-register)
#+end_src

**** M-g: Jump

#+begin_src emacs-lisp
  (general-create-definer jawa/bind-jump :prefix "M-g")
#+end_src

**** M-r: Registers

#+begin_src emacs-lisp
;; (general-def
;;   "M-r" (general-simulate-key "C-x r"))
#+end_src

*** Non-standard prefix key definers

#+begin_src emacs-lisp
(general-create-definer jawa/bind-user :prefix "C-c")
#+end_src


** Install packages

Requirements: [[core/setup.el][setup.el: jawa/require]]

The bulk of packages to install

#+BEGIN_SRC emacs-lisp
(require 'setup-packages)
#+END_SRC


** Setup convenience packages


** Keep emacs Custom-settings in separate file

This is in no-littering setup now.

#+BEGIN_SRC emacs-lisp
;; (setq custom-file
;;       (expand-file-name "custom.el" user-emacs-directory))
;; (load custom-file)
#+END_SRC


** Appearance

Most things can be setup in =setup-defaults.el= however, changes to font
faces and the like are done here

#+BEGIN_SRC emacs-lisp
;; Bright-red TODOs
(setq fixme-modes '(python-mode c++-mode c-mode emacs-lisp-mode))

(make-face 'font-lock-fixme-face)
(make-face 'font-lock-research-face)
(make-face 'font-lock-important-face)
(make-face 'font-lock-note-face)

(mapc (lambda (mode)
    (font-lock-add-keywords
	 mode
	 '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
	   ("\\<\\(RESEARCH\\)" 1 'font-lock-research-face t)
           ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
           ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
     fixme-modes
)

(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-research-face "Purple" nil nil t nil t nil nil)
(modify-face 'font-lock-important-face "Orange" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Blue" nil nil t nil t nil nil)

(custom-set-faces
 '(minibuffer-prompt ((t (:background "SystemBackground" :foreground "#51afef" :box (:line-width -1 :color "black" :style released-button) :weight bold)))))
#+END_SRC


** Monokai theme

#+BEGIN_SRC emacs-lisp
(setq monokai-dir
      (expand-file-name "themes/monokai-emacs/" user-emacs-directory))
(add-to-list 'custom-theme-load-path monokai-dir)
;; (load-theme 'monokai t)
#+END_SRC


** DOOM theme

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  ;; (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src


** Org-mode

Dependency: [[*Improved keybinding][general]], [[*Install packages][install packages]]

#+BEGIN_SRC emacs-lisp
(jawa/require 'setup-org-starter)
(jawa/require 'setup-org t)

(use-package org-edna
  :straight (org-edna :host github :repo "akirak/org-edna" :branch "edit")
  :config
  (org-edna-load))

(jawa/bind-jump "k" 'org-clock-goto)
(jawa/bind-user "C-x 4" 'jawa/org-archive-subtree-as-completed)

;; Crushes table editing problems
(use-package tabcrush
  :straight (tabcrush :host github :repo "raxod502/tabcrush"))
#+END_SRC


** Site-lisp packages

Requirements: [[*Add external project submodules (site-lisp) to load path][Add site-lisp to load path]]

#+BEGIN_SRC emacs-lisp
;; (jawa/require 'some-package-here)
#+END_SRC


** Language specific setup files

#+BEGIN_SRC emacs-lisp
(eval-after-load 'markdown-mode '(jawa/require 'setup-markdown-mode))
#+END_SRC


** Outline minor mode

Requirements: [[*Add external project submodules (site-lisp) to load path][Add site-lisp to load path]]

#+BEGIN_SRC emacs-lisp
  ;; (eval-after-load 'outline
  ;;   '(progn
  ;;     (require 'outline-magic)
  ;;     (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)))
#+END_SRC


** Outline minor mode for Python

Requirements: [[*Add external project submodules (site-lisp) to load path][Add site-lisp to load path]]

#+BEGIN_SRC emacs-lisp
;; Moved to setup-python.el 
#+END_SRC


** A smattering of sanity

#+BEGIN_SRC emacs-lisp
(jawa/require 'setup-defaults)
#+END_SRC


** More dired functionality (23.2+)

Requirements: [[*Add external project submodules (site-lisp) to load path][Add site-lisp to load path]]

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (when (version< emacs-version "24.4") (with-no-warnings
    ;; Shrink-wrap Dired's frame when you show or hide details
    (use-package autofit-frame)
    ;; `dired-details+.el' enhances `dired-details.el'
    (jawa/require 'dired-details+))))
#+END_SRC


** Represent undo-history as an actual tree (visualize with C-x u)

Requirements: [[*Add external project submodules (site-lisp) to load path][Add site-lisp to load path]]

#+BEGIN_SRC emacs-lisp
  ;; (setq undo-tree-mode-lighter "")
  ;; (require 'undo-tree)
  ;; (global-undo-tree-mode)
#+END_SRC


** Map files to modes

#+BEGIN_SRC emacs-lisp
(jawa/require 'setup-mode-maps)
#+END_SRC


** Buffer switching

Dependency: [[*Activate package.el for loading built-in packages][package.el]]

#+BEGIN_SRC emacs-lisp
(load-library "view")
(require 'cc-mode)
;; (require 'ido)
(require 'compile)
;; (ido-mode t)
#+END_SRC


** Flx Fuzzy Matching

Dependency: [[*Install packages if they're missing][setup packages]]

#+BEGIN_SRC emacs-lisp
  ;; (require 'flx-ido)
  ;; (ido-mode 1)
  ;; (ido-everywhere 1)
  ;; (flx-ido-mode 1)

  ;; disable ido faces to see flx highlights.
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-use-faces nil)
  ;; (setq flx-ido-use-faces nil)
#+END_SRC


** Jedi auto-complete

Dependency: [[*Install packages if they're missing][setup packages]]

#+BEGIN_SRC emacs-lisp
(setq jedi-config:use-system-python t)
#+END_SRC


** Projectile minor mode

Dependency: [[*Install packages if they're missing][setup packages]]

#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
#+END_SRC


** Git gutter global minor mode

#+BEGIN_SRC emacs-lisp
(jawa/require 'setup-gitgutter)
#+END_SRC


** Emacs iPython Notebooks (disabled)

Moved to setup-jupyter.el

#+BEGIN_SRC emacs-lisp :eval no :tangle no
(require 'ein)
(require 'ein-notebook)
(require 'ein-subpackages)

;; Omit a bunch of key chord prefix typing
(setq ein:use-smartrep t)

;; Use jedi autocomplete backend
(setq ein:completion-backend 'ein:use-ac-jedi-backend)

;; Execute ein source blocks in org-mode
(org-babel-do-load-languages
   'org-babel-load-languages
   '((ein . t)
))
#+END_SRC


** Mel Mode

Mel syntax
Mel documentation lookup

#+BEGIN_SRC emacs-lisp
;; Moved to setup-mel.el
;; (add-to-list 'auto-mode-alist '("\\.mel$" . mel-mode))
;; (autoload 'mel-mode "mel-mode" nil t)
;; 
;; ;; mel outline mode
;; (require 'mel-magic)
#+END_SRC


** Key bindings

#+BEGIN_SRC emacs-lisp
(jawa/require 'setup-key-bindings)
#+END_SRC


** Window (disabled)

#+BEGIN_SRC emacs-lisp :eval no :tangle no
(general-add-hook 'window-setup-hook 'post-load-stuff t)
#+END_SRC


** Diminish

#+begin_src emacs-lisp
(diminish 'subword-mode)
#+end_src


** Google this

Seems like a [[https://github.com/Malabarba/emacs-google-this][decent package]] for googling things from emacs.

#+begin_src emacs-lisp
(use-package google-this
  :hook (after-init . google-this-mode))
#+end_src


** Stop asking to eval code blocks
:PROPERTIES:
:CREATED_TIME: [2020-01-11 23:37:28 -0500]
:END:

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src


** Do not check signatures

Work around these errors when running =package-refresh-contents=

#+begin_example
Failed to verify signature archive-contents.sig:
066DAFCB81E42C40 created at 2020-01-03T17:05:02-0500 using RSA
Command output:
gpg: Signature made 01/03/20 17:05:02 Eastern Standard Time
gpg:                using RSA key C433554766D3DDC64221BFAA066DAFCB81E42C40
gpg: Can't check signature: No public key
#+end_example

#+begin_src emacs-lisp
(setq package-check-signature nil)
#+end_src

** Macros

#+begin_src emacs-lisp
(jawa/require 'setup-macros)
#+end_src
