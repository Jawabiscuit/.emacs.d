#+OPTIONS: toc:nil num:nil
#+STARTUP: content indent
#+STARTUP: hidestars

* Emacs Configuration
** Toggle debug messages
#+BEGIN_SRC emacs-lisp
;; (setq debug-on-error t)
#+END_SRC


** Turn on functions disabled by default
#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC


** Turn off mouse interface early in startup to avoid momentary display
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC


** Enable installation of packages from MELPA
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and
  ;; MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

(package-initialize)

(setq package-pinned-packages '())

;; Fetch the archive on first run using this config
(unless package-archive-contents
  (package-refresh-contents))

;; Manually check for `use-package' the first time
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(use-package dash
  :ensure t)
#+END_SRC


** No Littering

Package-specific configuration files, including snippets, are kept in [[https://github.com/akirak/emacs-config-library][a separate repository]], not in this repository. 

*** WAITING :config:
:LOGBOOK:
- State "WAITING"    from "DEFERRED"   [2019-12-02 Mon 11:38] \\
  Move yasnippet, yankpad, etc, into ~/~lib/emacs
:END:

#+begin_src emacs-lisp
;;  (defcustom javrin/no-littering-use-my-etc-library t
;;    "Whether to use my configuration file library in ~/lib/emacs as `no-littering-etc-directory'.")
;;
;;  (use-package no-littering
;;    :init
;;    (when javrin/no-littering-use-my-etc-library
;;      (let ((dir "~/lib/emacs"))
;;        (when (or (file-directory-p dir)
;;                  (and (yes-or-no-p "~/lib/emacs does not exist. Clone it from GitHub?")
;;                       (= 0 (call-process-shell-command
;;                             (format "git clone %s %s"
;;                                     "https://github.com/javrin/emacs-config-library.git"
;;                                     (shell-quote-argument (expand-file-name dir)))
;;                             nil nil nil))))
;;          (setq no-littering-etc-directory dir)))))
#+end_src


** No splash screen please ... jeez
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC


** Site-lisp
#+BEGIN_SRC emacs-lisp
(setq site-lisp-dir
      (expand-file-name "site-lisp" user-emacs-directory))
#+END_SRC


** Ipython site-lisp dir
#+BEGIN_SRC emacs-lisp
(setq ein-site-lisp-dir
      (concat site-lisp-dir
        (convert-standard-filename "/emacs-ipython-notebook/lisp")))
#+END_SRC


** Settings
#+BEGIN_SRC emacs-lisp
(setq settings-dir
      (expand-file-name "settings" user-emacs-directory))
#+END_SRC


** Functions
#+BEGIN_SRC emacs-lisp
(setq defuns-dir
      (expand-file-name "defuns" user-emacs-directory))
#+END_SRC


** Log
#+BEGIN_SRC emacs-lisp
(setq casey-log-file
      (expand-file-name "log.org" user-emacs-directory))
#+END_SRC


** Todo
#+BEGIN_SRC emacs-lisp
(setq casey-todo-file
      (expand-file-name "todo.org" user-emacs-directory))
#+END_SRC


** Load all files in defuns-dir
#+BEGIN_SRC emacs-lisp
(dolist (file (directory-files defuns-dir t "\\w+"))
  (when (file-regular-p file)
    (load file)))
#+END_SRC


** Setup load-path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path settings-dir)
(add-to-list 'load-path site-lisp-dir)
(add-to-list 'load-path ein-site-lisp-dir)
#+END_SRC


** Add external project submodules (site-lisp) to load path
#+BEGIN_SRC emacs-lisp
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+END_SRC


** Install packages if they're missing
#+BEGIN_SRC emacs-lisp
(require 'setup-package)
#+END_SRC


** Package setup tools
#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'use-package))
;; (setq use-package-always-ensure t)
#+END_SRC


** Keep emacs Custom-settings in separate file
#+BEGIN_SRC emacs-lisp
(setq custom-file
      (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC


** Appearance
  - Most things can be setup in sane-defaults.el however, changes to
    font faces and the like are done here
#+BEGIN_SRC emacs-lisp
;; Bright-red TODOs
(setq fixme-modes '(python-mode c++-mode c-mode emacs-lisp-mode))

(make-face 'font-lock-fixme-face)
(make-face 'font-lock-research-face)
(make-face 'font-lock-important-face)
(make-face 'font-lock-note-face)

(mapc (lambda (mode)
    (font-lock-add-keywords
	 mode
	 '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
	   ("\\<\\(RESEARCH\\)" 1 'font-lock-research-face t)
           ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
           ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
     fixme-modes
)

(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-research-face "Purple" nil nil t nil t nil nil)
(modify-face 'font-lock-important-face "Orange" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Blue" nil nil t nil t nil nil)
#+END_SRC


** Load Monokai theme
#+BEGIN_SRC emacs-lisp
(setq monokai-dir
      (expand-file-name "themes/monokai-emacs/" user-emacs-directory))
(add-to-list 'custom-theme-load-path monokai-dir)
(load-theme 'monokai t)
#+END_SRC


** Setup extensions
#+BEGIN_SRC emacs-lisp
(eval-after-load 'magit '(require 'setup-magit))
(require 'magit-gitflow)    ; gitflow extension for magit
(add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
(require 'setup-smartparens); Automatic insertion, wrapping and paredit-like navigation with user defined pairs.
(require 'multiple-cursors) ; Multiple cursors for Emacs.
;; (require 'fold-this)        ; Just fold this region please
(require 'smex)             ; M-x interface with Ido-style fuzzy matching.
(smex-initialize)
(require 'expand-region)    ; Increase selected region by semantic units.
#+END_SRC


** Org-mode
#+BEGIN_SRC emacs-lisp
(require 'setup-org)
#+END_SRC


** Site-lisp packages
#+BEGIN_SRC emacs-lisp
(require 'ox-twbs)            ; Bootstrap compatible HTML Back-End for Org
(require 'command-log-mode)   ; log keyboard commands to buffer
(require 'wgrep)              ; wgrep allows you to edit a grep buffer and apply those changes to the file buffer
(require 'dired-details+)     ; show and hide directory detail information
#+END_SRC


** Language specific setup files
#+BEGIN_SRC emacs-lisp
(eval-after-load 'markdown-mode '(require 'setup-markdown-mode))
#+END_SRC


** Outline minor mode
#+BEGIN_SRC emacs-lisp
(eval-after-load 'outline
  '(progn
    (require 'outline-magic)
    (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)))
#+END_SRC


** Outline minor mode for Python
#+BEGIN_SRC emacs-lisp
(require 'python-magic)
#+END_SRC


** Pandoc
#+BEGIN_SRC emacs-lisp
(add-hook 'markdown-mode-hook 'pandoc-mode)
#+END_SRC


** A smattering of sanity
#+BEGIN_SRC emacs-lisp
(require 'sane-defaults)
#+END_SRC


** More dired functionality (23.2+)
#+BEGIN_SRC emacs-lisp
(load "dired-x")
#+END_SRC


** Represent undo-history as an actual tree (visualize with C-x u)
#+BEGIN_SRC emacs-lisp
(setq undo-tree-mode-lighter "")
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC


** Map files to modes
#+BEGIN_SRC emacs-lisp
(require 'mode-mappings)
#+END_SRC


** Buffer switching
#+BEGIN_SRC emacs-lisp
(load-library "view")
(require 'cc-mode)
;; (require 'ido)
(require 'compile)
;; (ido-mode t)
#+END_SRC


** Flx Fuzzy Matching
#+BEGIN_SRC emacs-lisp
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)

;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
#+END_SRC


** Jedi auto-complete
#+BEGIN_SRC emacs-lisp
(require 'jedi-starter)
#+END_SRC


** Projectile minor mode
#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
#+END_SRC


** Setup Counsel, Ivy, Swiper
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(counsel-mode 1)
#+END_SRC


** Git gutter global minor mode
  - Options (disabled) for setting up mode per file type in mode-mappings.el
#+BEGIN_SRC emacs-lisp
(require 'setup-gitgutter)
;; (global-git-gutter-mode +1)
#+END_SRC


** Emacs iPython Notebooks!
#+BEGIN_SRC emacs-lisp
(require 'ein)
(require 'ein-notebook)
(require 'ein-subpackages)
;; Omit a bunch of key chord prefix typing
(setq ein:use-smartrep t)
;; Use jedi autocomplete backend
(setq ein:completion-backend 'ein:use-ac-jedi-backend)
;; Execute ein source blocks in org-mode
(org-babel-do-load-languages
   'org-babel-load-languages
   '((ein . t)
))
#+END_SRC


** Emacs to Maya
  - Send Mel or Python to Maya
#+BEGIN_SRC emacs-lisp
  (add-hook
   'python-mode-hook
   (lambda ()
     (require 'etom)
     (setq etom-default-host "localhost")
     (setq etom-default-port 2222)))
#+END_SRC


** Editing (some definitions are in editing_defuns.el)
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'casey-big-fun-text-hook)
#+END_SRC


** Mel Mode
  - Mel syntax
  - Mel documentation lookup
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.mel$" . mel-mode))
(autoload 'mel-mode "mel-mode" nil t)

;; mel outline mode
(require 'mel-magic)
#+END_SRC


** Key bindings
#+BEGIN_SRC emacs-lisp
(require 'key-bindings)
#+END_SRC


** Window
#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook 'post-load-stuff t)
#+END_SRC


** Babel sh Command

#+BEGIN_SRC emacs-lisp
  ;; (require 'ob-shell)
  ;; (defadvice org-babel-sh-evaluate (around set-shell activate)
  ;;   "Add header argument :shcmd that determines the shell to be called."
  ;;   (let* ((org-babel-sh-command (or (cdr (assoc :shcmd params)) org-babel-sh-command)))
  ;;     ad-do-it
  ;;     ))
#+END_SRC


** Smartparens

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
(add-hook 'org-mode-hook #'smartparens-mode)
(add-hook 'markdown-mode-hook #'smartparens-mode)
(add-hook 'python-mode-hook #'smartparens-mode)
(add-hook 'c++-mode-hook #'smartparens-mode)
(add-hook 'js-mode-hook #'smartparens-mode)

;; elisp comment highlighting
;; Redefine this global pair (`LaTex') to a new value locally
(sp-local-pair 'emacs-lisp-mode "`" "'")

;; New pair
(sp-pair "<" ">")

;; Local pairs can be removed by calling `sp-local-pair' with optional keyword argument `:actions' with value `:rem'
;; (sp-local-pair 'LaTeX-mode "`" nil :actions :rem)

;; Create a wrapping
(sp-pair "(" ")" :wrap "C-(")
;; Usage
;;
;; |foobar
;; hit C-(
;; becomes (|foobar)
#+END_SRC


** Yasnippet

#+BEGIN_SRC emacs-lisp
;; (add-hook 'emacs-lisp-mode-hook #'yas-minor-mode)
;; (add-hook 'org-mode-hook #'yas-minor-mode)
;; (add-hook 'python-mode-hook #'yas-minor-mode)
#+END_SRC
