* Emacs Configuration
** Toggle debug messages
#+BEGIN_SRC emacs-lisp
;; (setq debug-on-error t)
#+END_SRC

** Turn on functions disabled by default
#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

** Turn off mouse interface early in startup to avoid momentary display
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

** Enable installation of packages from MELPA
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and
  ;; MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

(package-initialize)
#+END_SRC

** No splash screen please ... jeez
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Site-lisp
#+BEGIN_SRC emacs-lisp
(setq site-lisp-dir
      (expand-file-name "site-lisp" user-emacs-directory))
#+END_SRC

** Ipython site-lisp dir
#+BEGIN_SRC emacs-lisp
(setq ein-site-lisp-dir
      (concat site-lisp-dir
        (convert-standard-filename "/emacs-ipython-notebook/lisp")))
#+END_SRC

** Settings
#+BEGIN_SRC emacs-lisp
(setq settings-dir
      (expand-file-name "settings" user-emacs-directory))
#+END_SRC

** Functions
#+BEGIN_SRC emacs-lisp
(setq defuns-dir
      (expand-file-name "defuns" user-emacs-directory))
#+END_SRC

** Log
#+BEGIN_SRC emacs-lisp
(setq casey-log-file
      (expand-file-name "log.txt" user-emacs-directory))
#+END_SRC

** Todo
#+BEGIN_SRC emacs-lisp
(setq casey-todo-file
      (expand-file-name "todo.org" user-emacs-directory))
#+END_SRC

** Load all files in defuns-dir
#+BEGIN_SRC emacs-lisp
(dolist (file (directory-files defuns-dir t "\\w+"))
  (when (file-regular-p file)
    (load file)))
#+END_SRC

** Setup load-path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path settings-dir)
(add-to-list 'load-path site-lisp-dir)
(add-to-list 'load-path ein-site-lisp-dir)
#+END_SRC

** Add external projects to load path
#+BEGIN_SRC emacs-lisp
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+END_SRC

** Package setup tools
#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'use-package))
(setq use-package-always-ensure t)
#+END_SRC

** DONE replace stuff in here with use-package
   CLOSED: [2018-10-17 Wed 20:40]
#+BEGIN_SRC emacs-lisp
(require 'setup-package)
#+END_SRC

** Keep emacs Custom-settings in separate file
#+BEGIN_SRC emacs-lisp
(setq custom-file
      (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

** Install extensions if they're missing
#+BEGIN_SRC emacs-lisp
(defun init--install-packages ()
  (packages-install
   '(
     auctex            ; Integrated environment for *TeX*
     diminish          ; Diminished modes from modeline
     expand-region     ; Increase selected region by semantic units
     fold-this         ; Code folding
     htmlize           ; Convert buffer text and decorations to HTML.
     magit             ; Complete Git interface
     magit-gitflow     ; Gitflow extension for magit
     markdown-mode     ; Emacs Major mode for Markdown-formatted files
     multiple-cursors  ; Multiple cursors for Emacs
     org-bullets       ; Show bullets in org-mode as UTF-8 characters
     paredit           ; Minor mode for editing parentheses
     restclient        ; In editor rest server/clien
     smartparens       ; Auto closure for parenthesis and other characters
     smex              ; Smart M-x
     smooth-scrolling  ; Make emacs scroll smoothly
)))

(condition-case nil
    (init--install-packages)
  (error
   (package-refresh-contents)
   (init--install-packages)))
#+END_SRC

** Set up appearance
  - Requires some packages to be installed
#+BEGIN_SRC emacs-lisp
(require 'appearance)
#+END_SRC

** Setup extensions
#+BEGIN_SRC emacs-lisp
(eval-after-load 'magit '(require 'setup-magit))
(require 'magit-gitflow)
(add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
(require 'setup-smartparens)
(require 'multiple-cursors)
(require 'fold-this)
(require 'smex)
(smex-initialize)
(require 'expand-region)
(require 'setup-org)
#+END_SRC

** Site-lisp packages
#+BEGIN_SRC emacs-lisp
(require 'ox-twbs)
#+END_SRC

** Language specific setup files
#+BEGIN_SRC emacs-lisp
(eval-after-load 'markdown-mode '(require 'setup-markdown-mode))
#+END_SRC

** A smattering of sanity
#+BEGIN_SRC emacs-lisp
(require 'sane-defaults)
#+END_SRC

** Represent undo-history as an actual tree (visualize with C-x u)
#+BEGIN_SRC emacs-lisp
(setq undo-tree-mode-lighter "")
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC

** Map files to modes
#+BEGIN_SRC emacs-lisp
(require 'mode-mappings)
#+END_SRC

** Setup key bindings
#+BEGIN_SRC emacs-lisp
(require 'key-bindings)
#+END_SRC

** Buffer switching
#+BEGIN_SRC emacs-lisp
(load-library "view")
(require 'cc-mode)
;; (require 'ido)
(require 'compile)
;; (ido-mode t)
#+END_SRC

** Flx Fuzzy Matching
#+BEGIN_SRC emacs-lisp
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)

;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
#+END_SRC

** Jedi auto-complete
#+BEGIN_SRC emacs-lisp
(require 'jedi-starter)
#+END_SRC

** Emacs iPython Notebooks!
#+BEGIN_SRC emacs-lisp
(require 'ein)
(require 'ein-loaddefs)
(require 'ein-notebook)
(require 'ein-subpackages)
;; Omit a bunch of key chord prefix typing
(setq ein:use-smartrep t)
;; Use jedi autocomplete backend
(setq ein:completion-backend 'ein:use-ac-jedi-backend)
#+END_SRC

** Mel Mode
  - Mel syntax
  - Mel documentation lookup
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.mel$" . mel-mode))
(autoload 'mel-mode "mel-mode" nil t)
#+END_SRC

** Emacs to Maya
  - Send Mel or Python to Maya
#+BEGIN_SRC emacs-lisp
(add-hook
 'python-mode-hook
 (lambda ()
   (require 'etom)
   (setq etom-default-host "localhost")
   (setq etom-default-port 2222)
   (local-set-key (kbd "C-c C-r") 'etom-send-region)
   (local-set-key (kbd "C-c C-c") 'etom-send-buffer)
   (local-set-key (kbd "C-c C-l") 'etom-send-buffer)
   (local-set-key (kbd "C-c C-z") 'etom-show-buffer)))
#+END_SRC

** Editing (some definitions are in editing_defuns.el)
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'casey-big-fun-text-hook)
#+END_SRC

** Window
#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook 'post-load-stuff t)
#+END_SRC

